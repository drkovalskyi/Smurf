static Double_t TopVBFBkgScaleFactor(Int_t mH) {
  Int_t mHiggs[31] = {0,110,115,118,120,122,124,125,126,128,130,135,140,145,150,155,160,170,180,190,200,250,300,350,400,450,500,550,600,700,800};
  Double_t TopVBFBkgSF[31] = { 
1.04661,0.855611,0.855611,0.936718,1.09108,0.915367,0.855924,0.798237,0.798237,0.799169,0.765459,0.754719,0.593098,0.593098,0.846818,0.846818,1.01538,0.906538,1.22914,0.921607,0.761751,1.06423,1.33255,1.16672,1.08218,0.653267,0.793425,0.895213,0.830712,0.770177,0.995127};
  Int_t massIndex = -1;
  for (UInt_t m=0; m < 31 ; ++m) {
    if (mH == mHiggs[m]) massIndex = m;
  }
  if (massIndex >= 0) {
    return TopVBFBkgSF[massIndex];
  } else { assert(0); }
  return 1.0;
}
static Double_t TopVBFBkgScaleFactorKappa(Int_t mH) {
  Int_t mHiggs[31] = {0,110,115,118,120,122,124,125,126,128,130,135,140,145,150,155,160,170,180,190,200,250,300,350,400,450,500,550,600,700,800};
  Double_t TopVBFBkgKappa[31] = { 
1.17179,1.63708,1.63708,1.55952,1.49397,1.4933,1.49648,1.50582,1.50582,1.50512,1.50546,1.4904,1.52444,1.52444,1.50748,1.50748,1.45791,1.45768,1.36442,1.38521,1.39122,1.30244,1.28054,1.28313,1.33992,1.57152,1.54738,1.48301,1.59129,1.66211,1.66088};
  Int_t massIndex = -1;
  for (UInt_t m=0; m < 31 ; ++m) {
    if (mH == mHiggs[m]) massIndex = m;
  }
  if (massIndex >= 0) {
    return TopVBFBkgKappa[massIndex];
  } else { assert(0); }
  return 1.0;
}

static Double_t TopVBFOFYield(Int_t mH) {
  Int_t mHiggs[31] = {0,110,115,118,120,122,124,125,126,128,130,135,140,145,150,155,160,170,180,190,200,250,300,350,400,450,500,550,600,700,800};
  Double_t TopVBFBkgOF[31] = { 
1.14769,0.611873,0.611873,0.611942,1.03214,0.783138,0.718697,0.676067,0.676067,0.675855,0.661285,0.678136,0.362964,0.362964,0.352471,0.352471,0.359655,0.302365,0.967922,0.803262,0.736336,1.095,1.53198,1.43152,1.80772,1.19795,1.59612,1.89454,1.59679,1.35627,1.98024};
  Int_t massIndex = -1;
  for (UInt_t m=0; m < 31 ; ++m) {
    if (mH == mHiggs[m]) massIndex = m;
  }
  if (massIndex >= 0) {
    return TopVBFBkgOF[massIndex];
  } else { assert(0); }
  return 1.0;
}
static Double_t TopVBFOFYieldKappa(Int_t mH) {
  Int_t mHiggs[31] = {0,110,115,118,120,122,124,125,126,128,130,135,140,145,150,155,160,170,180,190,200,250,300,350,400,450,500,550,600,700,800};
  Double_t TopVBFOFBkgKappa[31] = { 
1.21212,2.03288,2.03288,2.03277,1.71559,1.71559,1.7136,1.71559,1.71559,1.71559,1.71308,1.68697,1.90685,1.90685,1.98532,1.98532,1.99601,1.99383,1.5069,1.56991,1.51199,1.3602,1.32817,1.3315,1.36749,1.63419,1.56211,1.49683,1.6125,1.71757,1.71609};
  Int_t massIndex = -1;
  for (UInt_t m=0; m < 31 ; ++m) {
    if (mH == mHiggs[m]) massIndex = m;
  }
  if (massIndex >= 0) {
    return TopVBFOFBkgKappa[massIndex];
  } else { assert(0); }
  return 1.0;
}

static Double_t TopVBFSFYield(Int_t mH) {
  Int_t mHiggs[31] = {0,110,115,118,120,122,124,125,126,128,130,135,140,145,150,155,160,170,180,190,200,250,300,350,400,450,500,550,600,700,800};
  Double_t TopVBFBkgSF[31] = { 
0.874906,1.46625,1.46625,1.55994,1.30052,1.30267,1.30052,1.21632,1.21632,1.21839,1.12399,1.00581,1.13607,1.13607,1.81476,1.81476,2.24634,2.27673,1.81387,1.15194,0.842812,1.00568,0.926556,0.736884,0.247956,0.193128,0.108712,0.131391,0.175197,0.204725,0.235393};
  Int_t massIndex = -1;
  for (UInt_t m=0; m < 31 ; ++m) {
    if (mH == mHiggs[m]) massIndex = m;
  }
  if (massIndex >= 0) {
    return TopVBFBkgSF[massIndex];
  } else { assert(0); }
  return 1.0;
}
static Double_t TopVBFSFYieldKappa(Int_t mH) {
  Int_t mHiggs[31] = {0,110,115,118,120,122,124,125,126,128,130,135,140,145,150,155,160,170,180,190,200,250,300,350,400,450,500,550,600,700,800};
  Double_t TopVBFSFBkgKappa[31] = { 
1.26624,1.70627,1.70627,1.58191,1.58408,1.58312,1.58408,1.60319,1.60319,1.60217,1.60217,1.60217,1.60318,1.60318,1.58878,1.58878,1.51248,1.51248,1.5145,1.47477,1.53447,1.48645,1.50034,1.517,1.6008,1.73206,2.0707,2.00076,2.00076,2.00076,2.00076};
  Int_t massIndex = -1;
  for (UInt_t m=0; m < 31 ; ++m) {
    if (mH == mHiggs[m]) massIndex = m;
  }
  if (massIndex >= 0) {
    return TopVBFSFBkgKappa[massIndex];
  } else { assert(0); }
  return 1.0;
}

