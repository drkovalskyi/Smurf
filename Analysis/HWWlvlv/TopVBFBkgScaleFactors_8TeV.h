static Double_t TopVBFBkgScaleFactor(Int_t mH) {
  Int_t mHiggs[31] = {0,110,115,118,120,122,124,125,126,128,130,135,140,145,150,155,160,170,180,190,200,250,300,350,400,450,500,550,600,700,800};
  Double_t TopVBFBkgSF[31] = { 
0.802214,0.814062,0.814062,0.91418,1.07806,0.898003,0.868836,0.786705,0.786705,0.784452,0.74534,0.74662,0.601246,0.601246,0.885811,0.885811,1.01633,0.91338,1.12299,0.823155,0.688371,0.932048,1.08686,0.98818,1.06247,0.653524,0.81547,0.693779,0.622075,0.720542,0.905371};
  Int_t massIndex = -1;
  for (UInt_t m=0; m < 31 ; ++m) {
    if (mH == mHiggs[m]) massIndex = m;
  }
  if (massIndex >= 0) {
    return TopVBFBkgSF[massIndex];
  } else { assert(0); }
  return 1.0;
}
static Double_t TopVBFBkgScaleFactorKappa(Int_t mH) {
  Int_t mHiggs[31] = {0,110,115,118,120,122,124,125,126,128,130,135,140,145,150,155,160,170,180,190,200,250,300,350,400,450,500,550,600,700,800};
  Double_t TopVBFBkgKappa[31] = { 
1.19201,1.65732,1.65732,1.57881,1.50803,1.50683,1.50502,1.51646,1.51646,1.5114,1.50995,1.47969,1.50181,1.50181,1.50213,1.50213,1.45336,1.45308,1.36194,1.41113,1.4058,1.30989,1.30278,1.30472,1.34533,1.57231,1.55066,1.55327,1.68695,1.66389,1.66549};
  Int_t massIndex = -1;
  for (UInt_t m=0; m < 31 ; ++m) {
    if (mH == mHiggs[m]) massIndex = m;
  }
  if (massIndex >= 0) {
    return TopVBFBkgKappa[massIndex];
  } else { assert(0); }
  return 1.0;
}

static Double_t TopVBFOFYield(Int_t mH) {
  Int_t mHiggs[31] = {0,110,115,118,120,122,124,125,126,128,130,135,140,145,150,155,160,170,180,190,200,250,300,350,400,450,500,550,600,700,800};
  Double_t TopVBFBkgOF[31] = { 
0.92537,0.624494,0.624494,0.624608,1.08708,0.812168,0.772753,0.703616,0.703616,0.690821,0.666155,0.683314,0.382775,0.382775,0.366178,0.366178,0.357415,0.304109,0.843761,0.745555,0.716327,0.958303,1.35222,1.33867,1.7504,1.17893,1.61739,1.32508,1.06682,1.13491,1.52166};
  Int_t massIndex = -1;
  for (UInt_t m=0; m < 31 ; ++m) {
    if (mH == mHiggs[m]) massIndex = m;
  }
  if (massIndex >= 0) {
    return TopVBFBkgOF[massIndex];
  } else { assert(0); }
  return 1.0;
}
static Double_t TopVBFOFYieldKappa(Int_t mH) {
  Int_t mHiggs[31] = {0,110,115,118,120,122,124,125,126,128,130,135,140,145,150,155,160,170,180,190,200,250,300,350,400,450,500,550,600,700,800};
  Double_t TopVBFOFBkgKappa[31] = { 
1.24005,2.02286,2.02286,2.02267,1.69938,1.69938,1.69651,1.69651,1.69651,1.69651,1.69329,1.65463,1.841,1.841,1.96863,1.96863,1.97601,1.97338,1.5038,1.58738,1.50575,1.3776,1.34922,1.35054,1.37126,1.62291,1.55727,1.55994,1.71894,1.71974,1.72165};
  Int_t massIndex = -1;
  for (UInt_t m=0; m < 31 ; ++m) {
    if (mH == mHiggs[m]) massIndex = m;
  }
  if (massIndex >= 0) {
    return TopVBFOFBkgKappa[massIndex];
  } else { assert(0); }
  return 1.0;
}

static Double_t TopVBFSFYield(Int_t mH) {
  Int_t mHiggs[31] = {0,110,115,118,120,122,124,125,126,128,130,135,140,145,150,155,160,170,180,190,200,250,300,350,400,450,500,550,600,700,800};
  Double_t TopVBFBkgSF[31] = { 
0.617781,1.38244,1.38244,1.58815,1.27526,1.28177,1.26236,1.15489,1.15489,1.1574,1.06515,0.947258,1.0831,1.0831,1.9408,1.9408,2.31142,2.34529,1.853,0.984722,0.639845,0.888928,0.560567,0.418454,0.244239,0.190755,0.110256,0.133191,0.174817,0.208264,0.241626};
  Int_t massIndex = -1;
  for (UInt_t m=0; m < 31 ; ++m) {
    if (mH == mHiggs[m]) massIndex = m;
  }
  if (massIndex >= 0) {
    return TopVBFBkgSF[massIndex];
  } else { assert(0); }
  return 1.0;
}
static Double_t TopVBFSFYieldKappa(Int_t mH) {
  Int_t mHiggs[31] = {0,110,115,118,120,122,124,125,126,128,130,135,140,145,150,155,160,170,180,190,200,250,300,350,400,450,500,550,600,700,800};
  Double_t TopVBFSFBkgKappa[31] = { 
1.26361,1.69518,1.69518,1.57594,1.59357,1.59055,1.59963,1.62962,1.62962,1.62825,1.62825,1.62825,1.60229,1.60229,1.58416,1.58416,1.50923,1.50923,1.5102,1.51704,1.59873,1.47781,1.48269,1.48154,1.59299,1.72918,2.06197,2.00078,2.00078,2.00078,2.00078};
  Int_t massIndex = -1;
  for (UInt_t m=0; m < 31 ; ++m) {
    if (mH == mHiggs[m]) massIndex = m;
  }
  if (massIndex >= 0) {
    return TopVBFSFBkgKappa[massIndex];
  } else { assert(0); }
  return 1.0;
}

