static Double_t TopVBFBkgScaleFactor(Int_t mH) {
  Int_t mHiggs[31] = {0,110,115,118,120,122,124,125,126,128,130,135,140,145,150,155,160,170,180,190,200,250,300,350,400,450,500,550,600,700,800};
  Double_t TopVBFBkgSF[31] = { 
1.04251,0.852837,0.852837,0.934164,1.08887,0.913511,0.854183,0.796585,0.796585,0.796688,0.763089,0.749784,0.588055,0.588055,0.84463,0.84463,1.0127,0.904144,1.22584,0.917955,0.758878,1.05893,1.32894,1.16324,1.07851,0.648481,0.788913,0.891594,0.827807,0.768892,0.993996};
  Int_t massIndex = -1;
  for (UInt_t m=0; m < 31 ; ++m) {
    if (mH == mHiggs[m]) massIndex = m;
  }
  if (massIndex >= 0) {
    return TopVBFBkgSF[massIndex];
  } else { assert(0); }
  return 1.0;
}
static Double_t TopVBFBkgScaleFactorKappa(Int_t mH) {
  Int_t mHiggs[31] = {0,110,115,118,120,122,124,125,126,128,130,135,140,145,150,155,160,170,180,190,200,250,300,350,400,450,500,550,600,700,800};
  Double_t TopVBFBkgKappa[31] = { 
1.17229,1.63892,1.63892,1.56085,1.49478,1.49411,1.49729,1.50666,1.50666,1.50648,1.50682,1.49342,1.52874,1.52874,1.50857,1.50857,1.45893,1.45869,1.36523,1.38652,1.39249,1.30374,1.2811,1.28377,1.34083,1.57532,1.55012,1.48469,1.59303,1.66284,1.66126};
  Int_t massIndex = -1;
  for (UInt_t m=0; m < 31 ; ++m) {
    if (mH == mHiggs[m]) massIndex = m;
  }
  if (massIndex >= 0) {
    return TopVBFBkgKappa[massIndex];
  } else { assert(0); }
  return 1.0;
}

static Double_t TopVBFOFYield(Int_t mH) {
  Int_t mHiggs[31] = {0,110,115,118,120,122,124,125,126,128,130,135,140,145,150,155,160,170,180,190,200,250,300,350,400,450,500,550,600,700,800};
  Double_t TopVBFBkgOF[31] = { 
1.14344,0.607053,0.607053,0.607123,1.02764,0.779726,0.714947,0.673122,0.673122,0.671721,0.657252,0.674171,0.358688,0.358688,0.349005,0.349005,0.355875,0.299194,0.963784,0.799893,0.734129,1.09022,1.52699,1.42668,1.80189,1.18895,1.58776,1.88794,1.59351,1.35372,1.97768};
  Int_t massIndex = -1;
  for (UInt_t m=0; m < 31 ; ++m) {
    if (mH == mHiggs[m]) massIndex = m;
  }
  if (massIndex >= 0) {
    return TopVBFBkgOF[massIndex];
  } else { assert(0); }
  return 1.0;
}
static Double_t TopVBFOFYieldKappa(Int_t mH) {
  Int_t mHiggs[31] = {0,110,115,118,120,122,124,125,126,128,130,135,140,145,150,155,160,170,180,190,200,250,300,350,400,450,500,550,600,700,800};
  Double_t TopVBFOFBkgKappa[31] = { 
1.21271,2.04058,2.04058,2.04046,1.71837,1.71837,1.71699,1.71837,1.71837,1.71963,1.71709,1.69066,1.91719,1.91719,1.99462,1.99462,2.0061,2.00387,1.50882,1.57197,1.51323,1.36151,1.329,1.33238,1.36842,1.63851,1.56466,1.49828,1.61341,1.7185,1.7166};
  Int_t massIndex = -1;
  for (UInt_t m=0; m < 31 ; ++m) {
    if (mH == mHiggs[m]) massIndex = m;
  }
  if (massIndex >= 0) {
    return TopVBFOFBkgKappa[massIndex];
  } else { assert(0); }
  return 1.0;
}

static Double_t TopVBFSFYield(Int_t mH) {
  Int_t mHiggs[31] = {0,110,115,118,120,122,124,125,126,128,130,135,140,145,150,155,160,170,180,190,200,250,300,350,400,450,500,550,600,700,800};
  Double_t TopVBFBkgSF[31] = { 
0.871207,1.46602,1.46602,1.55969,1.30029,1.30256,1.30029,1.21611,1.21611,1.21818,1.1238,1.00563,1.1359,1.1359,1.81412,1.81412,2.24567,2.27604,1.81312,1.151,0.842032,1.00206,0.925764,0.735609,0.247502,0.193093,0.108697,0.131363,0.17516,0.204682,0.235344};
  Int_t massIndex = -1;
  for (UInt_t m=0; m < 31 ; ++m) {
    if (mH == mHiggs[m]) massIndex = m;
  }
  if (massIndex >= 0) {
    return TopVBFBkgSF[massIndex];
  } else { assert(0); }
  return 1.0;
}
static Double_t TopVBFSFYieldKappa(Int_t mH) {
  Int_t mHiggs[31] = {0,110,115,118,120,122,124,125,126,128,130,135,140,145,150,155,160,170,180,190,200,250,300,350,400,450,500,550,600,700,800};
  Double_t TopVBFSFBkgKappa[31] = { 
1.26721,1.70623,1.70623,1.58188,1.58407,1.58305,1.58407,1.60317,1.60317,1.60215,1.60215,1.60215,1.60315,1.60315,1.58874,1.58874,1.51244,1.51244,1.51451,1.47499,1.53479,1.488,1.50049,1.5176,1.60177,1.73203,2.07063,2.00076,2.00076,2.00076,2.00076};
  Int_t massIndex = -1;
  for (UInt_t m=0; m < 31 ; ++m) {
    if (mH == mHiggs[m]) massIndex = m;
  }
  if (massIndex >= 0) {
    return TopVBFSFBkgKappa[massIndex];
  } else { assert(0); }
  return 1.0;
}

