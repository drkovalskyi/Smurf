static Double_t TopVBFBkgScaleFactor(Int_t mH) {
  Int_t mHiggs[31] = {0,110,115,118,120,122,124,125,126,128,130,135,140,145,150,155,160,170,180,190,200,250,300,350,400,450,500,550,600,700,800};
  Double_t TopVBFBkgSF[31] = { 
0.777801,0.865296,0.865296,0.79087,1.02758,0.802728,0.776326,0.719605,0.719605,0.713749,0.684173,0.676099,0.55222,0.55222,0.878684,0.878684,0.988074,0.887186,1.07828,0.788046,0.681924,0.924699,1.04683,0.969661,1.04327,0.676354,0.820742,0.70414,0.634697,0.734554,0.922702};
  Int_t massIndex = -1;
  for (UInt_t m=0; m < 31 ; ++m) {
    if (mH == mHiggs[m]) massIndex = m;
  }
  if (massIndex >= 0) {
    return TopVBFBkgSF[massIndex];
  } else { assert(0); }
  return 1.0;
}
static Double_t TopVBFBkgScaleFactorKappa(Int_t mH) {
  Int_t mHiggs[31] = {0,110,115,118,120,122,124,125,126,128,130,135,140,145,150,155,160,170,180,190,200,250,300,350,400,450,500,550,600,700,800};
  Double_t TopVBFBkgKappa[31] = { 
1.18976,1.62527,1.62527,1.62527,1.52443,1.52443,1.52026,1.53381,1.53381,1.52841,1.52505,1.48806,1.52141,1.52141,1.49483,1.49483,1.44792,1.44764,1.35892,1.4099,1.39155,1.3003,1.29714,1.29641,1.33599,1.52833,1.52385,1.52905,1.65436,1.63211,1.63244};
  Int_t massIndex = -1;
  for (UInt_t m=0; m < 31 ; ++m) {
    if (mH == mHiggs[m]) massIndex = m;
  }
  if (massIndex >= 0) {
    return TopVBFBkgKappa[massIndex];
  } else { assert(0); }
  return 1.0;
}

static Double_t TopVBFOFYield(Int_t mH) {
  Int_t mHiggs[31] = {0,110,115,118,120,122,124,125,126,128,130,135,140,145,150,155,160,170,180,190,200,250,300,350,400,450,500,550,600,700,800};
  Double_t TopVBFBkgOF[31] = { 
0.89797,0.604427,0.604427,0.582692,1.11854,0.774233,0.731246,0.691684,0.691684,0.673381,0.663588,0.68524,0.41428,0.41428,0.36432,0.36432,0.350466,0.291318,0.801458,0.703767,0.706636,0.953169,1.28205,1.27936,1.67239,1.16505,1.568,1.30396,1.05335,1.1184,1.49403};
  Int_t massIndex = -1;
  for (UInt_t m=0; m < 31 ; ++m) {
    if (mH == mHiggs[m]) massIndex = m;
  }
  if (massIndex >= 0) {
    return TopVBFBkgOF[massIndex];
  } else { assert(0); }
  return 1.0;
}
static Double_t TopVBFOFYieldKappa(Int_t mH) {
  Int_t mHiggs[31] = {0,110,115,118,120,122,124,125,126,128,130,135,140,145,150,155,160,170,180,190,200,250,300,350,400,450,500,550,600,700,800};
  Double_t TopVBFOFBkgKappa[31] = { 
1.23611,2.01685,2.01685,2.01685,1.68182,1.68182,1.67899,1.67899,1.67899,1.67899,1.67602,1.6228,1.76863,1.76863,1.94708,1.94708,1.96259,1.95986,1.50182,1.59396,1.48881,1.36516,1.34637,1.3467,1.36719,1.59243,1.5444,1.54679,1.70025,1.70094,1.70135};
  Int_t massIndex = -1;
  for (UInt_t m=0; m < 31 ; ++m) {
    if (mH == mHiggs[m]) massIndex = m;
  }
  if (massIndex >= 0) {
    return TopVBFOFBkgKappa[massIndex];
  } else { assert(0); }
  return 1.0;
}

static Double_t TopVBFSFYield(Int_t mH) {
  Int_t mHiggs[31] = {0,110,115,118,120,122,124,125,126,128,130,135,140,145,150,155,160,170,180,190,200,250,300,350,400,450,500,550,600,700,800};
  Double_t TopVBFBkgSF[31] = { 
0.588512,1.51882,1.51882,1.2704,1.0254,0.981787,0.955165,0.854815,0.854815,0.876295,0.791454,0.679856,0.818198,0.818198,1.88193,1.88193,2.11155,2.21735,1.77292,0.957755,0.637383,0.866859,0.56602,0.457168,0.261945,0.204188,0.118555,0.14226,0.186964,0.222896,0.258764};
  Int_t massIndex = -1;
  for (UInt_t m=0; m < 31 ; ++m) {
    if (mH == mHiggs[m]) massIndex = m;
  }
  if (massIndex >= 0) {
    return TopVBFBkgSF[massIndex];
  } else { assert(0); }
  return 1.0;
}
static Double_t TopVBFSFYieldKappa(Int_t mH) {
  Int_t mHiggs[31] = {0,110,115,118,120,122,124,125,126,128,130,135,140,145,150,155,160,170,180,190,200,250,300,350,400,450,500,550,600,700,800};
  Double_t TopVBFSFBkgKappa[31] = { 
1.2696,1.68013,1.68013,1.68013,1.70639,1.70639,1.72608,1.78052,1.78052,1.7614,1.7544,1.7544,1.70578,1.70578,1.57735,1.57735,1.50375,1.50375,1.50434,1.51099,1.59054,1.47144,1.46395,1.44362,1.58878,1.72642,2.05357,2.00082,2.00082,2.00082,2.00082};
  Int_t massIndex = -1;
  for (UInt_t m=0; m < 31 ; ++m) {
    if (mH == mHiggs[m]) massIndex = m;
  }
  if (massIndex >= 0) {
    return TopVBFSFBkgKappa[massIndex];
  } else { assert(0); }
  return 1.0;
}

