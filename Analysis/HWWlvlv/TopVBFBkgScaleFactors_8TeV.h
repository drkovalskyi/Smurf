static Double_t TopVBFBkgScaleFactor(Int_t mH) {
  Int_t mHiggs[31] = {0,110,115,118,120,122,124,125,126,128,130,135,140,145,150,155,160,170,180,190,200,250,300,350,400,450,500,550,600,700,800};
  Double_t TopVBFBkgSF[31] = { 
1.07751,0.869714,0.869714,0.950358,1.11078,0.931889,0.871279,0.812725,0.812725,0.813664,0.780109,0.773126,0.609825,0.609825,0.864264,0.864264,1.03709,0.92592,1.25425,0.945814,0.783493,1.09623,1.37342,1.20223,1.11812,0.682842,0.831229,0.930562,0.867276,0.79709,1.0261};
  Int_t massIndex = -1;
  for (UInt_t m=0; m < 31 ; ++m) {
    if (mH == mHiggs[m]) massIndex = m;
  }
  if (massIndex >= 0) {
    return TopVBFBkgSF[massIndex];
  } else { assert(0); }
  return 1.0;
}
static Double_t TopVBFBkgScaleFactorKappa(Int_t mH) {
  Int_t mHiggs[31] = {0,110,115,118,120,122,124,125,126,128,130,135,140,145,150,155,160,170,180,190,200,250,300,350,400,450,500,550,600,700,800};
  Double_t TopVBFBkgKappa[31] = { 
1.17121,1.63482,1.63482,1.55814,1.49169,1.49102,1.49423,1.50343,1.50343,1.50274,1.50258,1.48512,1.51623,1.51623,1.50463,1.50463,1.45474,1.45452,1.36246,1.3836,1.38874,1.30087,1.27993,1.28215,1.33795,1.56222,1.53755,1.47586,1.58098,1.65732,1.65849};
  Int_t massIndex = -1;
  for (UInt_t m=0; m < 31 ; ++m) {
    if (mH == mHiggs[m]) massIndex = m;
  }
  if (massIndex >= 0) {
    return TopVBFBkgKappa[massIndex];
  } else { assert(0); }
  return 1.0;
}

static Double_t TopVBFOFYield(Int_t mH) {
  Int_t mHiggs[31] = {0,110,115,118,120,122,124,125,126,128,130,135,140,145,150,155,160,170,180,190,200,250,300,350,400,450,500,550,600,700,800};
  Double_t TopVBFBkgOF[31] = { 
1.18351,0.632818,0.632818,0.632888,1.05777,0.802581,0.736505,0.692852,0.692852,0.692635,0.677718,0.697132,0.378534,0.378534,0.360845,0.360845,0.369628,0.310737,0.987053,0.825873,0.75703,1.12736,1.58091,1.4765,1.86881,1.25256,1.6668,1.96707,1.66463,1.40418,2.04184};
  Int_t massIndex = -1;
  for (UInt_t m=0; m < 31 ; ++m) {
    if (mH == mHiggs[m]) massIndex = m;
  }
  if (massIndex >= 0) {
    return TopVBFBkgOF[massIndex];
  } else { assert(0); }
  return 1.0;
}
static Double_t TopVBFOFYieldKappa(Int_t mH) {
  Int_t mHiggs[31] = {0,110,115,118,120,122,124,125,126,128,130,135,140,145,150,155,160,170,180,190,200,250,300,350,400,450,500,550,600,700,800};
  Double_t TopVBFOFBkgKappa[31] = { 
1.21123,2.01429,2.01429,2.01418,1.70915,1.70915,1.70721,1.70915,1.70915,1.70915,1.70665,1.67871,1.88317,1.88317,1.97748,1.97748,1.9843,1.98218,1.50485,1.5684,1.51011,1.35908,1.32722,1.33006,1.36538,1.62416,1.55398,1.49026,1.60306,1.71265,1.71405};
  Int_t massIndex = -1;
  for (UInt_t m=0; m < 31 ; ++m) {
    if (mH == mHiggs[m]) massIndex = m;
  }
  if (massIndex >= 0) {
    return TopVBFOFBkgKappa[massIndex];
  } else { assert(0); }
  return 1.0;
}

static Double_t TopVBFSFYield(Int_t mH) {
  Int_t mHiggs[31] = {0,110,115,118,120,122,124,125,126,128,130,135,140,145,150,155,160,170,180,190,200,250,300,350,400,450,500,550,600,700,800};
  Double_t TopVBFBkgSF[31] = { 
0.89721,1.48511,1.48511,1.57669,1.3194,1.32331,1.31286,1.22797,1.22797,1.23006,1.13476,1.01544,1.15478,1.15478,1.849,1.849,2.28847,2.31942,1.85233,1.17848,0.865859,1.03249,0.951049,0.757031,0.251623,0.194904,0.109992,0.132283,0.176387,0.206115,0.236992};
  Int_t massIndex = -1;
  for (UInt_t m=0; m < 31 ; ++m) {
    if (mH == mHiggs[m]) massIndex = m;
  }
  if (massIndex >= 0) {
    return TopVBFBkgSF[massIndex];
  } else { assert(0); }
  return 1.0;
}
static Double_t TopVBFSFYieldKappa(Int_t mH) {
  Int_t mHiggs[31] = {0,110,115,118,120,122,124,125,126,128,130,135,140,145,150,155,160,170,180,190,200,250,300,350,400,450,500,550,600,700,800};
  Double_t TopVBFSFBkgKappa[31] = { 
1.26523,1.70345,1.70345,1.58033,1.58033,1.57861,1.58322,1.60225,1.60225,1.60123,1.60123,1.60123,1.59816,1.59816,1.58628,1.58628,1.50999,1.50999,1.51078,1.47029,1.52663,1.48067,1.49953,1.51608,1.59697,1.73031,2.06543,2.00076,2.00076,2.00076,2.00076};
  Int_t massIndex = -1;
  for (UInt_t m=0; m < 31 ; ++m) {
    if (mH == mHiggs[m]) massIndex = m;
  }
  if (massIndex >= 0) {
    return TopVBFSFBkgKappa[massIndex];
  } else { assert(0); }
  return 1.0;
}

