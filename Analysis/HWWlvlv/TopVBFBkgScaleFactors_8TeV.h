static Double_t TopVBFBkgScaleFactor(Int_t mH) {
  Int_t mHiggs[31] = {0,110,115,118,120,122,124,125,126,128,130,135,140,145,150,155,160,170,180,190,200,250,300,350,400,450,500,550,600,700,800};
  Double_t TopVBFBkgSF[31] = { 
1.08584,0.67712,0.67712,0.750236,0.914874,0.784834,0.721045,0.690752,0.690752,0.71361,0.651049,0.641582,0.498156,0.498156,0.842117,0.842117,1.01727,0.908213,1.23562,0.912494,0.753186,1.03869,1.27222,1.13571,1.04106,0.621884,0.74871,0.870467,0.799701,0.735896,0.946424};
  Int_t massIndex = -1;
  for (UInt_t m=0; m < 31 ; ++m) {
    if (mH == mHiggs[m]) massIndex = m;
  }
  if (massIndex >= 0) {
    return TopVBFBkgSF[massIndex];
  } else { assert(0); }
  return 1.0;
}
static Double_t TopVBFBkgScaleFactorKappa(Int_t mH) {
  Int_t mHiggs[31] = {0,110,115,118,120,122,124,125,126,128,130,135,140,145,150,155,160,170,180,190,200,250,300,350,400,450,500,550,600,700,800};
  Double_t TopVBFBkgKappa[31] = { 
1.15661,1.66441,1.66441,1.5867,1.51015,1.50931,1.52546,1.52429,1.52429,1.51124,1.54909,1.52977,1.58117,1.58117,1.50903,1.50903,1.45965,1.45942,1.36531,1.38248,1.38897,1.29942,1.2768,1.2793,1.33574,1.56669,1.54393,1.47805,1.58546,1.65394,1.65291};
  Int_t massIndex = -1;
  for (UInt_t m=0; m < 31 ; ++m) {
    if (mH == mHiggs[m]) massIndex = m;
  }
  if (massIndex >= 0) {
    return TopVBFBkgKappa[massIndex];
  } else { assert(0); }
  return 1.0;
}

static Double_t TopVBFOFYield(Int_t mH) {
  Int_t mHiggs[31] = {0,110,115,118,120,122,124,125,126,128,130,135,140,145,150,155,160,170,180,190,200,250,300,350,400,450,500,550,600,700,800};
  Double_t TopVBFBkgOF[31] = { 
1.19663,0.422037,0.422037,0.422089,0.78049,0.62433,0.579663,0.571167,0.571167,0.575928,0.512138,0.520067,0.255251,0.255251,0.347646,0.347646,0.360448,0.303017,0.976309,0.789636,0.726237,1.05971,1.4435,1.38748,1.71474,1.11429,1.46841,1.8158,1.51411,1.2702,1.82979};
  Int_t massIndex = -1;
  for (UInt_t m=0; m < 31 ; ++m) {
    if (mH == mHiggs[m]) massIndex = m;
  }
  if (massIndex >= 0) {
    return TopVBFBkgOF[massIndex];
  } else { assert(0); }
  return 1.0;
}
static Double_t TopVBFOFYieldKappa(Int_t mH) {
  Int_t mHiggs[31] = {0,110,115,118,120,122,124,125,126,128,130,135,140,145,150,155,160,170,180,190,200,250,300,350,400,450,500,550,600,700,800};
  Double_t TopVBFOFBkgKappa[31] = { 
1.18654,2.14299,2.14299,2.14285,1.75474,1.75331,1.75341,1.72806,1.72806,1.72935,1.82276,1.79041,2.16879,2.16879,1.99486,1.99486,2.00598,2.00382,1.50832,1.56508,1.50817,1.35646,1.32462,1.32751,1.36322,1.63087,1.55895,1.49186,1.60644,1.71141,1.71016};
  Int_t massIndex = -1;
  for (UInt_t m=0; m < 31 ; ++m) {
    if (mH == mHiggs[m]) massIndex = m;
  }
  if (massIndex >= 0) {
    return TopVBFOFBkgKappa[massIndex];
  } else { assert(0); }
  return 1.0;
}

static Double_t TopVBFSFYield(Int_t mH) {
  Int_t mHiggs[31] = {0,110,115,118,120,122,124,125,126,128,130,135,140,145,150,155,160,170,180,190,200,250,300,350,400,450,500,550,600,700,800};
  Double_t TopVBFBkgSF[31] = { 
0.866039,1.45703,1.45703,1.56086,1.30124,1.30353,1.30124,1.21681,1.21681,1.21884,1.12441,1.00618,1.13655,1.13655,1.82526,1.82526,2.25024,2.28068,1.81676,1.154,0.841085,1.01157,0.913501,0.723137,0.246801,0.194125,0.109298,0.132042,0.176065,0.205739,0.236559};
  Int_t massIndex = -1;
  for (UInt_t m=0; m < 31 ; ++m) {
    if (mH == mHiggs[m]) massIndex = m;
  }
  if (massIndex >= 0) {
    return TopVBFBkgSF[massIndex];
  } else { assert(0); }
  return 1.0;
}
static Double_t TopVBFSFYieldKappa(Int_t mH) {
  Int_t mHiggs[31] = {0,110,115,118,120,122,124,125,126,128,130,135,140,145,150,155,160,170,180,190,200,250,300,350,400,450,500,550,600,700,800};
  Double_t TopVBFSFBkgKappa[31] = { 
1.26401,1.70504,1.70504,1.58035,1.58254,1.58152,1.58254,1.60169,1.60169,1.60069,1.60069,1.60069,1.60167,1.60167,1.58957,1.58957,1.5135,1.5135,1.5156,1.47574,1.53561,1.48794,1.4935,1.50973,1.60068,1.7318,2.07017,2.00069,2.00069,2.00069,2.00069};
  Int_t massIndex = -1;
  for (UInt_t m=0; m < 31 ; ++m) {
    if (mH == mHiggs[m]) massIndex = m;
  }
  if (massIndex >= 0) {
    return TopVBFSFBkgKappa[massIndex];
  } else { assert(0); }
  return 1.0;
}

