static Double_t TopVBFBkgScaleFactor(Int_t mH) {
  Int_t mHiggs[31] = {0,110,115,118,120,122,124,125,126,128,130,135,140,145,150,155,160,170,180,190,200,250,300,350,400,450,500,550,600,700,800};
  Double_t TopVBFBkgSF[31] = { 
1.07945,0.873164,0.873164,0.953862,1.11424,0.93479,0.873999,0.815609,0.815609,0.816551,0.782637,0.773934,0.611048,0.611048,0.865877,0.865877,1.03913,0.92774,1.25658,0.948107,0.785379,1.09821,1.37502,1.20381,1.11957,0.683655,0.832147,0.932007,0.868574,0.798243,1.02758};
  Int_t massIndex = -1;
  for (UInt_t m=0; m < 31 ; ++m) {
    if (mH == mHiggs[m]) massIndex = m;
  }
  if (massIndex >= 0) {
    return TopVBFBkgSF[massIndex];
  } else { assert(0); }
  return 1.0;
}
static Double_t TopVBFBkgScaleFactorKappa(Int_t mH) {
  Int_t mHiggs[31] = {0,110,115,118,120,122,124,125,126,128,130,135,140,145,150,155,160,170,180,190,200,250,300,350,400,450,500,550,600,700,800};
  Double_t TopVBFBkgKappa[31] = { 
1.17111,1.63354,1.63354,1.55719,1.49109,1.49042,1.49363,1.50259,1.50259,1.50191,1.50191,1.48552,1.51621,1.51621,1.50461,1.50461,1.45472,1.45449,1.36245,1.38319,1.38833,1.30068,1.27986,1.28207,1.33785,1.56205,1.53743,1.47569,1.58075,1.65702,1.6582};
  Int_t massIndex = -1;
  for (UInt_t m=0; m < 31 ; ++m) {
    if (mH == mHiggs[m]) massIndex = m;
  }
  if (massIndex >= 0) {
    return TopVBFBkgKappa[massIndex];
  } else { assert(0); }
  return 1.0;
}

static Double_t TopVBFOFYield(Int_t mH) {
  Int_t mHiggs[31] = {0,110,115,118,120,122,124,125,126,128,130,135,140,145,150,155,160,170,180,190,200,250,300,350,400,450,500,550,600,700,800};
  Double_t TopVBFBkgOF[31] = { 
1.18572,0.635792,0.635792,0.635863,1.05818,0.802893,0.736793,0.693121,0.693121,0.692904,0.677982,0.696822,0.379158,0.379158,0.361469,0.361469,0.370265,0.311273,0.988748,0.828137,0.758958,1.12938,1.5826,1.47838,1.87108,1.25395,1.66858,1.97008,1.66707,1.40614,2.04469};
  Int_t massIndex = -1;
  for (UInt_t m=0; m < 31 ; ++m) {
    if (mH == mHiggs[m]) massIndex = m;
  }
  if (massIndex >= 0) {
    return TopVBFBkgOF[massIndex];
  } else { assert(0); }
  return 1.0;
}
static Double_t TopVBFOFYieldKappa(Int_t mH) {
  Int_t mHiggs[31] = {0,110,115,118,120,122,124,125,126,128,130,135,140,145,150,155,160,170,180,190,200,250,300,350,400,450,500,550,600,700,800};
  Double_t TopVBFOFBkgKappa[31] = { 
1.21107,2.01129,2.01129,2.01118,1.7101,1.7101,1.70816,1.7101,1.7101,1.7101,1.70759,1.68017,1.88322,1.88322,1.97747,1.97747,1.98429,1.98217,1.50485,1.56747,1.50942,1.35882,1.32716,1.32998,1.36529,1.62401,1.55387,1.49009,1.60283,1.71235,1.71375};
  Int_t massIndex = -1;
  for (UInt_t m=0; m < 31 ; ++m) {
    if (mH == mHiggs[m]) massIndex = m;
  }
  if (massIndex >= 0) {
    return TopVBFOFBkgKappa[massIndex];
  } else { assert(0); }
  return 1.0;
}

static Double_t TopVBFSFYield(Int_t mH) {
  Int_t mHiggs[31] = {0,110,115,118,120,122,124,125,126,128,130,135,140,145,150,155,160,170,180,190,200,250,300,350,400,450,500,550,600,700,800};
  Double_t TopVBFBkgSF[31] = { 
0.898701,1.48836,1.48836,1.58017,1.32232,1.32623,1.31577,1.23071,1.23071,1.2328,1.13729,1.01771,1.15735,1.15735,1.85255,1.85255,2.29314,2.32416,1.85611,1.18083,0.867675,1.03445,0.952444,0.758117,0.252141,0.195238,0.110181,0.13251,0.176689,0.206468,0.237398};
  Int_t massIndex = -1;
  for (UInt_t m=0; m < 31 ; ++m) {
    if (mH == mHiggs[m]) massIndex = m;
  }
  if (massIndex >= 0) {
    return TopVBFBkgSF[massIndex];
  } else { assert(0); }
  return 1.0;
}
static Double_t TopVBFSFYieldKappa(Int_t mH) {
  Int_t mHiggs[31] = {0,110,115,118,120,122,124,125,126,128,130,135,140,145,150,155,160,170,180,190,200,250,300,350,400,450,500,550,600,700,800};
  Double_t TopVBFSFBkgKappa[31] = { 
1.26514,1.7035,1.7035,1.58036,1.58036,1.57864,1.58325,1.60226,1.60226,1.60124,1.60124,1.60124,1.59817,1.59817,1.58625,1.58625,1.50996,1.50996,1.51074,1.47027,1.52661,1.48064,1.49935,1.51589,1.59701,1.73031,2.06543,2.00076,2.00076,2.00076,2.00076};
  Int_t massIndex = -1;
  for (UInt_t m=0; m < 31 ; ++m) {
    if (mH == mHiggs[m]) massIndex = m;
  }
  if (massIndex >= 0) {
    return TopVBFSFBkgKappa[massIndex];
  } else { assert(0); }
  return 1.0;
}

