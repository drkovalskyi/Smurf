static Double_t TopVBFBkgScaleFactor(Int_t mH) {
  Int_t mHiggs[31] = {0,110,115,118,120,122,124,125,126,128,130,135,140,145,150,155,160,170,180,190,200,250,300,350,400,450,500,550,600,700,800};
  Double_t TopVBFBkgSF[31] = { 
1.08407,0.68668,0.68668,0.758802,0.909203,0.778528,0.714559,0.684381,0.684381,0.707207,0.63388,0.628857,0.485406,0.485406,0.839888,0.839888,1.01573,0.906841,1.23219,0.909157,0.7504,1.033,1.30355,1.16486,1.07687,0.656047,0.798387,0.943055,0.885197,0.825384,0.944032};
  Int_t massIndex = -1;
  for (UInt_t m=0; m < 31 ; ++m) {
    if (mH == mHiggs[m]) massIndex = m;
  }
  if (massIndex >= 0) {
    return TopVBFBkgSF[massIndex];
  } else { assert(0); }
  return 1.0;
}
static Double_t TopVBFBkgScaleFactorKappa(Int_t mH) {
  Int_t mHiggs[31] = {0,110,115,118,120,122,124,125,126,128,130,135,140,145,150,155,160,170,180,190,200,250,300,350,400,450,500,550,600,700,800};
  Double_t TopVBFBkgKappa[31] = { 
1.15782,1.66397,1.66397,1.58688,1.51803,1.51718,1.53378,1.53247,1.53247,1.51912,1.55844,1.53842,1.59431,1.59431,1.5088,1.5088,1.45935,1.45912,1.36523,1.38239,1.38889,1.29973,1.27693,1.27933,1.33572,1.56708,1.54403,1.47782,1.58469,1.65323,1.65219};
  Int_t massIndex = -1;
  for (UInt_t m=0; m < 31 ; ++m) {
    if (mH == mHiggs[m]) massIndex = m;
  }
  if (massIndex >= 0) {
    return TopVBFBkgKappa[massIndex];
  } else { assert(0); }
  return 1.0;
}

static Double_t TopVBFOFYield(Int_t mH) {
  Int_t mHiggs[31] = {0,110,115,118,120,122,124,125,126,128,130,135,140,145,150,155,160,170,180,190,200,250,300,350,400,450,500,550,600,700,800};
  Double_t TopVBFBkgOF[31] = { 
1.19996,0.430714,0.430714,0.430768,0.793257,0.632026,0.586152,0.577067,0.577067,0.581959,0.509968,0.517951,0.254206,0.254206,0.346181,0.346181,0.358417,0.301316,0.972051,0.785874,0.722827,1.05402,1.50041,1.45031,1.83205,1.25658,1.69258,2.19432,1.88346,1.61081,1.82801};
  Int_t massIndex = -1;
  for (UInt_t m=0; m < 31 ; ++m) {
    if (mH == mHiggs[m]) massIndex = m;
  }
  if (massIndex >= 0) {
    return TopVBFBkgOF[massIndex];
  } else { assert(0); }
  return 1.0;
}
static Double_t TopVBFOFYieldKappa(Int_t mH) {
  Int_t mHiggs[31] = {0,110,115,118,120,122,124,125,126,128,130,135,140,145,150,155,160,170,180,190,200,250,300,350,400,450,500,550,600,700,800};
  Double_t TopVBFOFBkgKappa[31] = { 
1.18826,2.14076,2.14076,2.14061,1.754,1.75257,1.75267,1.72747,1.72747,1.72875,1.8227,1.79022,2.1685,2.1685,1.99475,1.99475,2.00731,2.00512,1.5084,1.56515,1.50823,1.35669,1.32476,1.3275,1.36314,1.63065,1.55879,1.49137,1.60515,1.70983,1.70857};
  Int_t massIndex = -1;
  for (UInt_t m=0; m < 31 ; ++m) {
    if (mH == mHiggs[m]) massIndex = m;
  }
  if (massIndex >= 0) {
    return TopVBFOFBkgKappa[massIndex];
  } else { assert(0); }
  return 1.0;
}

static Double_t TopVBFSFYield(Int_t mH) {
  Int_t mHiggs[31] = {0,110,115,118,120,122,124,125,126,128,130,135,140,145,150,155,160,170,180,190,200,250,300,350,400,450,500,550,600,700,800};
  Double_t TopVBFBkgSF[31] = { 
0.858447,1.45331,1.45331,1.55464,1.25525,1.25752,1.25525,1.17292,1.17292,1.17495,1.06179,0.969951,1.09555,1.09555,1.82151,1.82151,2.24877,2.27919,1.81561,1.1514,0.839836,1.00745,0.908935,0.719318,0.245431,0.191581,0.107866,0.130311,0.173757,0.203042,0.233459};
  Int_t massIndex = -1;
  for (UInt_t m=0; m < 31 ; ++m) {
    if (mH == mHiggs[m]) massIndex = m;
  }
  if (massIndex >= 0) {
    return TopVBFBkgSF[massIndex];
  } else { assert(0); }
  return 1.0;
}
static Double_t TopVBFSFYieldKappa(Int_t mH) {
  Int_t mHiggs[31] = {0,110,115,118,120,122,124,125,126,128,130,135,140,145,150,155,160,170,180,190,200,250,300,350,400,450,500,550,600,700,800};
  Double_t TopVBFSFBkgKappa[31] = { 
1.26488,1.70608,1.70608,1.58117,1.60228,1.60119,1.60228,1.62255,1.62255,1.62147,1.62147,1.62147,1.62252,1.62252,1.58923,1.58923,1.51308,1.51308,1.51517,1.47572,1.53568,1.4883,1.49376,1.50998,1.60156,1.73181,2.07017,2.00069,2.00069,2.00069,2.00069};
  Int_t massIndex = -1;
  for (UInt_t m=0; m < 31 ; ++m) {
    if (mH == mHiggs[m]) massIndex = m;
  }
  if (massIndex >= 0) {
    return TopVBFSFBkgKappa[massIndex];
  } else { assert(0); }
  return 1.0;
}

